# -*- mode: ruby -*-
# vi: set ft=ruby :

nodes = [
# { :hostname => 'cloudera',    :instance_name => 'cf-cloudera', :instance_type => 't2.medium',  :ami => 'ami-30ff5c47', :username => 'root',   :eip => 'none',  :group => 'management'},
# { :hostname => 'node1',       :instance_name => 'cf-node1',    :instance_type => 't2.medium',  :ami => 'ami-30ff5c47', :username => 'root',   :eip => 'none',  :group => 'nodes'},
# { :hostname => 'node2',       :instance_name => 'cf-node2',    :instance_type => 't2.medium',  :ami => 'ami-30ff5c47', :username => 'root',   :eip => 'none',  :group => 'nodes'},
# { :hostname => 'node3',       :instance_name => 'cf-node3',    :instance_type => 't2.medium',  :ami => 'ami-30ff5c47', :username => 'root',   :eip => 'none',  :group => 'nodes'},
 { :hostname => 'kdc-devops',  :instance_name => 'cf-kdc',      :instance_type => 't2.micro',  :ami => 'ami-a31976d4', :username => 'centos', :eip => 'none',  :group => 'infrastructure'},
# { :hostname => 'ldap-devops', :instance_name => 'cf-ldap',     :instance_type => 't2.micro',  :ami => 'ami-931976e4', :username => 'centos', :eip => 'none',  :group => 'infrastructure'},

]

# Prepare groups and hosts distribution for Ansible
groups ||= Hash.new
nodes.each do |node|
  groups[node[:group]] ||= Array.new
  groups[node[:group]].push(node[:hostname])
end

VAGRANTFILE_API_VERSION = "2"
# For cfengine installation
PACKAGE_RELEASE="3.6.5"
PACKAGE_BUILD="1"
BASEBOX_BUILD="201501201245"
DOMAIN_NAME="devops.mycompany.com"
cfhub_ip = "172.31.2.250"

config_aws_region = "eu-west-1"
config_aws_availability_zone = "eu-west-1a"
config_aws_security_groups = ["os-cloudera"]

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = "dummy"
  config.vm.box_url = "https://github.com/mitchellh/vagrant-aws/raw/master/dummy.box"

  # Create virtual machines
  nodes.each do |node|
    config.vm.define node[:hostname] do |node_config|
      node_config.ssh.pty = true
      node_config.vm.provider :aws do |aws, override|
        aws.keypair_name = ENV['AWS_VAGRANT_KEYPAIR_NAME']
        override.ssh.username = node[:username]
        override.ssh.private_key_path = ENV['AWS_VAGRANT_PRIVATE_KEY_PATH']
        aws.region = config_aws_region
        aws.availability_zone = config_aws_availability_zone
        aws.ami = node[:ami]
        aws.instance_type = node[:instance_type]
        aws.security_groups = config_aws_security_groups
        aws.tags = {'Name' => node[:instance_name]}

        if node[:eip] != "none"
          aws.elastic_ip = node[:eip]
        end

      end
      node_config.vm.synced_folder ".", "/vagrant", disabled: true
      node_config.vm.provision "shell",
        inline: "sudo sed -i 's/Defaults.*requiretty.*$/#Defaults requiretty/' /etc/sudoers"
      node_config.vm.provision "shell",
        inline: "/usr/bin/sudo /usr/bin/sed -i -r 's/^#?(PermitRootLogin|PasswordAuthentication) no/\1 yes/' /etc/ssh/sshd_config"
      node_config.vm.provision "shell",
        inline: "/usr/bin/sudo /usr/bin/systemctl restart sshd"
#      node_config.vm.provision "shell",
#       inline: "/usr/bin/sudo /usr/bin/systemctl stop iptables"
      node_config.vm.provision "shell",
        inline: "/sbin/service iptables stop"
      node_config.vm.provision :shell, :path => "scripts/ssh_root.sh"
      node_config.vm.provision :shell, :path => "scripts/set_hostname.sh", :args => "#{node[:hostname]} #{DOMAIN_NAME} #{node[:group]}"
      node_config.vm.provision :shell, :path => "scripts/install_cfengine_enterprise.sh", :args => "#{node[:group]} #{PACKAGE_RELEASE} #{PACKAGE_BUILD}"
      node_config.vm.provision :shell, :path => "scripts/bootstrap_cfengine.sh", :args => "#{cfhub_ip}"

    end
  end
end
