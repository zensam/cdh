#i-*- mode: ruby -*-
# vi: set ft=ruby :
nodes = [
 { :hostname => 'cloudera',  :instance_name => 'cf1-cloudera', :instance_type => 'm3.large',   :ami => 'ami-bc8131d4', :username => 'root',  :eip => 'none',     :group => 'management'},
 { :hostname => 'node1',     :instance_name => 'cf1-node1',    :instance_type => 'm3.medium',  :ami => 'ami-bc8131d4', :username => 'root',  :eip => 'none',     :group => 'nodes'},
 { :hostname => 'node2',     :instance_name => 'cf1-node2',    :instance_type => 'm3.medium',  :ami => 'ami-bc8131d4', :username => 'root',  :eip => 'none',     :group => 'nodes'},
 { :hostname => 'node3',     :instance_name => 'cf1-node3',    :instance_type => 'm3.medium',  :ami => 'ami-bc8131d4', :username => 'root',  :eip => 'none',     :group => 'nodes'},
# { :hostname => 'node4',     :instance_name => 'cf-node4',    :instance_type => 'm3.medium',  :ami => 'ami-bc8131d4', :username => 'root',  :eip => 'none',     :group => 'nodes'},
# { :hostname => 'node5',     :instance_name => 'cf-node5',    :instance_type => 'm3.medium',  :ami => 'ami-bc8131d4', :username => 'root',  :eip => 'none',     :group => 'nodes'},
  { :hostname => 'kdc',       :instance_name => 'cf1-kdc',      :instance_type => 't1.micro',   :ami => 'ami-bc8131d4', :username => 'root', :eip => 'none',   :group => 'infrastructure'},
# { :hostname => 'ldap', :instance_name => 'cf-ldap',     :instance_type => 't1.micro',  :ami => 'ami-931976e4', :username => 'centos', :eip => 'none',   :group => 'infrastructure'},

]

groups ||= Hash.new
nodes.each do |node|
  groups[node[:group]] ||= Array.new
  groups[node[:group]].push(node[:hostname])
end

VAGRANTFILE_API_VERSION = "2"
# For cfengine installation
PACKAGE_RELEASE="3.6.5"
PACKAGE_BUILD="1"
BASEBOX_BUILD="201501201245"
DOMAIN_NAME="one1.mycompany.com"
cfhub_ip = "172.31.14.96"

config_aws_region = "us-east-1"
config_aws_availability_zone = "us-east-1a"
config_aws_security_groups = ["cf-cloudera"]

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = "dummy"
  config.vm.box_url = "https://github.com/mitchellh/vagrant-aws/raw/master/dummy.box"

  # Create virtual machines
  nodes.each do |node|
    config.vm.define node[:hostname] do |node_config|
      node_config.ssh.pty = true
      node_config.vm.provider :aws do |aws, override|
        aws.keypair_name = ENV['AWS_VAGRANT_KEYPAIR_NAME']
        override.ssh.username = node[:username]
        override.ssh.private_key_path = ENV['AWS_VAGRANT_PRIVATE_KEY_PATH']
        aws.region = config_aws_region
        aws.availability_zone = config_aws_availability_zone
        aws.ami = node[:ami]
        aws.instance_type = node[:instance_type]
        aws.security_groups = config_aws_security_groups
        aws.tags = {'Name' => node[:instance_name]}

        aws.block_device_mapping = [
          # /
          {
            'DeviceName' => '/dev/sda',
            'Ebs.VolumeSize' => 26,
            'Ebs.DeleteOnTermination' => true,
            'Ebs.VolumeType' => 'gp2'
          },
          # /opt
#          {
#            'DeviceName' => '/dev/sdb',
#            'Ebs.VolumeSize' => 14,
#            'Ebs.DeleteOnTermination' => true,
#            'Ebs.VolumeType' => 'gp2'
#          },
          # /dfs
#          {
#            'DeviceName' => '/dev/sdc',
#            'Ebs.VolumeSize' => 10,
#            'Ebs.DeleteOnTermination' => true,
#            'Ebs.VolumeType' => 'gp2'
#          },
          # Swap
          {
            'DeviceName' => '/dev/sde',
            'Ebs.VolumeSize' => 4,
            'Ebs.DeleteOnTermination' => true,
            'Ebs.VolumeType' => 'gp2'
          }
        ]

        if node[:eip] != "none"
          aws.elastic_ip = node[:eip]
        end

      end
      node_config.vm.synced_folder ".", "/vagrant", disabled: true
      node_config.vm.provision "shell",
        inline: "/sbin/service iptables stop"
      node_config.vm.provision :shell, :path => "scripts/set_hostname.sh", :args => "#{node[:hostname]} #{DOMAIN_NAME} #{node[:group]}"
      node_config.vm.provision :shell, :path => "scripts/install_cfengine_enterprise.sh", :args => "#{node[:group]}"
      node_config.vm.provision :shell, :path => "scripts/bootstrap_cfengine.sh", :args => "#{cfhub_ip}"
    end
  end
end
